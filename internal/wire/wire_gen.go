// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"enceremony-be/commons/clients/mysql"
	"enceremony-be/internal/app"
	"enceremony-be/internal/auth/authorizer"
	handler3 "enceremony-be/internal/auth/handler"
	"enceremony-be/internal/common/logger"
	"enceremony-be/internal/config"
	mysql2 "enceremony-be/internal/database/mysql"
	"enceremony-be/internal/events/handler"
	"enceremony-be/internal/events/repo"
	"enceremony-be/internal/events/service"
	handler2 "enceremony-be/internal/product/handler"
	repo2 "enceremony-be/internal/product/repo"
	service2 "enceremony-be/internal/product/service"
	"enceremony-be/internal/router"
	repo3 "enceremony-be/internal/user/repo"
)

// Injectors from wire.go:

func InitializeApp() (app.App, error) {
	configConfig, err := config.NewConfig()
	if err != nil {
		return nil, err
	}
	loggerConf := config.NewLoggerConf(configConfig)
	loggerLogger, err := logger.NewLogger(loggerConf)
	if err != nil {
		return nil, err
	}
	mysqlConfig := config.NewMysqlConf(configConfig)
	connection, err := mysql.NewMysqlConnection(mysqlConfig, loggerLogger)
	if err != nil {
		return nil, err
	}
	mysqlStore := mysql2.NewMysqlStore(loggerLogger, connection, configConfig)
	eventsRepo := repo.NewEventsRepo(configConfig, mysqlStore)
	eventService := service.NewEventService(loggerLogger, configConfig, eventsRepo)
	eventsHandler := handler.NewEventsHandler(loggerLogger, configConfig, eventService)
	productRepo := repo2.NewProductRepo(configConfig, mysqlStore)
	productService := service2.NewProductService(loggerLogger, configConfig, productRepo)
	productHandler := handler2.NewProductHandler(loggerLogger, configConfig, productService)
	userRepo := repo3.NewUserRepo(configConfig, loggerLogger, mysqlStore)
	authorizerService := authorizer.NewAuthorizerService(loggerLogger, userRepo, configConfig)
	authHandler := handler3.NewAuthHandler(configConfig, authorizerService)
	routerRouter := router.NewRouter(configConfig, eventsHandler, loggerLogger, productHandler, authHandler)
	appApp := app.NewEnceremonyApp(routerRouter)
	return appApp, nil
}
